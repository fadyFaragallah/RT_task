
RT_task4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000544  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00800060  00000544  000005d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  008000a4  008000a4  0000061c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000064c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f3f  00000000  00000000  00000780  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000872  00000000  00000000  000016bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000091d  00000000  00000000  00001f31  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a4  00000000  00000000  00002850  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a2  00000000  00000000  00002af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007de  00000000  00000000  00003096  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003874  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 a1 01 	jmp	0x342	; 0x342 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e4       	ldi	r30, 0x44	; 68
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3a       	cpi	r26, 0xA4	; 164
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 ea       	ldi	r26, 0xA4	; 164
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 3a       	cpi	r26, 0xAD	; 173
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <main>
  8a:	0c 94 a0 02 	jmp	0x540	; 0x540 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Keypad_init>:
#include "keypad.h"
int Key_padRow[] = {R0, R1, R2, R3}; //rows of the keypad
int Key_padCol[] = {C0, C1, C2};//columnd
void  Keypad_init()
{
	keypadDDR &= ~ (1<<R0)|(1<<R1)|(1<<R2)|(1<<R3);//set upper part of keypad port as input
  92:	a0 98       	cbi	0x14, 0	; 20
	//this will be required for scanning the rows
	keypadDDR |= ((1<<C0)|(1<<C1)|(1<<C2));//set lower part of keypad port as output.This is
  94:	84 b3       	in	r24, 0x14	; 20
  96:	80 67       	ori	r24, 0x70	; 112
  98:	84 bb       	out	0x14, r24	; 20
	//the part of the keypad port where the rows are connected.
	keypadPORT = 0xFF ;
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	85 bb       	out	0x15, r24	; 21
  9e:	08 95       	ret

000000a0 <Keypad_getkey>:
}



char Keypad_getkey()
{
  a0:	ef 92       	push	r14
  a2:	ff 92       	push	r15
  a4:	0f 93       	push	r16
  a6:	1f 93       	push	r17
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	c0 e6       	ldi	r28, 0x60	; 96
  ae:	d0 e0       	ldi	r29, 0x00	; 0
	
	int i, j;
	for(i = 0; i < 3; i++)
  b0:	60 e0       	ldi	r22, 0x00	; 0
  b2:	70 e0       	ldi	r23, 0x00	; 0
	{
		keypadPORT |= ((1<<Key_padCol[0] ) | (1<<Key_padCol[1] ) | (1<<Key_padCol[2] ));
  b4:	de 01       	movw	r26, r28
  b6:	41 e0       	ldi	r20, 0x01	; 1
  b8:	50 e0       	ldi	r21, 0x00	; 0
  ba:	95 b3       	in	r25, 0x15	; 21
  bc:	fa 01       	movw	r30, r20
  be:	0c 90       	ld	r0, X
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <Keypad_getkey+0x26>
  c2:	ee 0f       	add	r30, r30
  c4:	ff 1f       	adc	r31, r31
  c6:	0a 94       	dec	r0
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <Keypad_getkey+0x22>
  ca:	9a 01       	movw	r18, r20
  cc:	12 96       	adiw	r26, 0x02	; 2
  ce:	0c 90       	ld	r0, X
  d0:	12 97       	sbiw	r26, 0x02	; 2
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <Keypad_getkey+0x38>
  d4:	22 0f       	add	r18, r18
  d6:	33 1f       	adc	r19, r19
  d8:	0a 94       	dec	r0
  da:	e2 f7       	brpl	.-8      	; 0xd4 <Keypad_getkey+0x34>
  dc:	2e 2b       	or	r18, r30
  de:	29 2b       	or	r18, r25
  e0:	ca 01       	movw	r24, r20
  e2:	14 96       	adiw	r26, 0x04	; 4
  e4:	0c 90       	ld	r0, X
  e6:	14 97       	sbiw	r26, 0x04	; 4
  e8:	02 c0       	rjmp	.+4      	; 0xee <Keypad_getkey+0x4e>
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	0a 94       	dec	r0
  f0:	e2 f7       	brpl	.-8      	; 0xea <Keypad_getkey+0x4a>
  f2:	82 2b       	or	r24, r18
  f4:	85 bb       	out	0x15, r24	; 21

		keypadPORT &= ~ (1 << Key_padCol[i]);//send a low to a particular row of the keypad
  f6:	95 b3       	in	r25, 0x15	; 21
  f8:	88 81       	ld	r24, Y
  fa:	22 96       	adiw	r28, 0x02	; 2
  fc:	9a 01       	movw	r18, r20
  fe:	02 c0       	rjmp	.+4      	; 0x104 <Keypad_getkey+0x64>
 100:	22 0f       	add	r18, r18
 102:	33 1f       	adc	r19, r19
 104:	8a 95       	dec	r24
 106:	e2 f7       	brpl	.-8      	; 0x100 <Keypad_getkey+0x60>
 108:	82 2f       	mov	r24, r18
 10a:	80 95       	com	r24
 10c:	89 23       	and	r24, r25
 10e:	85 bb       	out	0x15, r24	; 21
 110:	e6 e6       	ldi	r30, 0x66	; 102
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	ee 24       	eor	r14, r14
 116:	e3 94       	inc	r14
 118:	f1 2c       	mov	r15, r1
 11a:	00 e0       	ldi	r16, 0x00	; 0
 11c:	10 e0       	ldi	r17, 0x00	; 0
 11e:	05 c0       	rjmp	.+10     	; 0x12a <Keypad_getkey+0x8a>
 120:	0f 5f       	subi	r16, 0xFF	; 255
 122:	1f 4f       	sbci	r17, 0xFF	; 255
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	e8 1a       	sub	r14, r24
 128:	f8 0a       	sbc	r15, r24
		


			for(j = 0; j < 4; j++)
			{
				if(!(keypadPIN & (1<<Key_padRow[j])))//check if key is pressed
 12a:	83 b3       	in	r24, 0x13	; 19
 12c:	20 81       	ld	r18, Z
 12e:	32 96       	adiw	r30, 0x02	; 2
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	02 2e       	mov	r0, r18
 134:	02 c0       	rjmp	.+4      	; 0x13a <Keypad_getkey+0x9a>
 136:	95 95       	asr	r25
 138:	87 95       	ror	r24
 13a:	0a 94       	dec	r0
 13c:	e2 f7       	brpl	.-8      	; 0x136 <Keypad_getkey+0x96>
 13e:	80 fd       	sbrc	r24, 0
 140:	3d c0       	rjmp	.+122    	; 0x1bc <Keypad_getkey+0x11c>
 142:	ca 01       	movw	r24, r20
 144:	02 c0       	rjmp	.+4      	; 0x14a <Keypad_getkey+0xaa>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	2a 95       	dec	r18
 14c:	e2 f7       	brpl	.-8      	; 0x146 <Keypad_getkey+0xa6>
 14e:	9c 01       	movw	r18, r24
				{
					while(!(keypadPIN & (1<<Key_padRow[j])));  //wait for key to be released  (Single press)
 150:	83 b3       	in	r24, 0x13	; 19
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	82 23       	and	r24, r18
 156:	93 23       	and	r25, r19
 158:	89 2b       	or	r24, r25
 15a:	d1 f3       	breq	.-12     	; 0x150 <Keypad_getkey+0xb0>
					switch(i)
 15c:	61 30       	cpi	r22, 0x01	; 1
 15e:	71 05       	cpc	r23, r1
 160:	99 f0       	breq	.+38     	; 0x188 <Keypad_getkey+0xe8>
 162:	62 30       	cpi	r22, 0x02	; 2
 164:	71 05       	cpc	r23, r1
 166:	e9 f0       	breq	.+58     	; 0x1a2 <Keypad_getkey+0x102>
 168:	61 15       	cp	r22, r1
 16a:	71 05       	cpc	r23, r1
 16c:	39 f5       	brne	.+78     	; 0x1bc <Keypad_getkey+0x11c>
					{
					case(0):
                		{
						if (j == 0) return '1';
 16e:	01 15       	cp	r16, r1
 170:	11 05       	cpc	r17, r1
 172:	89 f1       	breq	.+98     	; 0x1d6 <Keypad_getkey+0x136>
						else if (j == 1) return '4';
 174:	01 30       	cpi	r16, 0x01	; 1
 176:	11 05       	cpc	r17, r1
 178:	81 f1       	breq	.+96     	; 0x1da <Keypad_getkey+0x13a>
						else if (j == 2) return '7';
 17a:	02 30       	cpi	r16, 0x02	; 2
 17c:	11 05       	cpc	r17, r1
 17e:	79 f1       	breq	.+94     	; 0x1de <Keypad_getkey+0x13e>
						else if (j == 3) return '*';
 180:	03 30       	cpi	r16, 0x03	; 3
 182:	11 05       	cpc	r17, r1
 184:	d9 f4       	brne	.+54     	; 0x1bc <Keypad_getkey+0x11c>
 186:	2d c0       	rjmp	.+90     	; 0x1e2 <Keypad_getkey+0x142>
						break;
                		}
					case(1):
                		{
						if (j == 0) return '2';
 188:	01 15       	cp	r16, r1
 18a:	11 05       	cpc	r17, r1
 18c:	61 f1       	breq	.+88     	; 0x1e6 <Keypad_getkey+0x146>
						else if (j == 1) return '5';
 18e:	01 30       	cpi	r16, 0x01	; 1
 190:	11 05       	cpc	r17, r1
 192:	59 f1       	breq	.+86     	; 0x1ea <Keypad_getkey+0x14a>
						else if (j == 2) return '8';
 194:	02 30       	cpi	r16, 0x02	; 2
 196:	11 05       	cpc	r17, r1
 198:	51 f1       	breq	.+84     	; 0x1ee <Keypad_getkey+0x14e>
						else if (j == 3) return '0';
 19a:	03 30       	cpi	r16, 0x03	; 3
 19c:	11 05       	cpc	r17, r1
 19e:	71 f4       	brne	.+28     	; 0x1bc <Keypad_getkey+0x11c>
 1a0:	28 c0       	rjmp	.+80     	; 0x1f2 <Keypad_getkey+0x152>
						break;
                		}
					case(2):
                		{
						if (j == 0) return '3';
 1a2:	01 15       	cp	r16, r1
 1a4:	11 05       	cpc	r17, r1
 1a6:	39 f1       	breq	.+78     	; 0x1f6 <Keypad_getkey+0x156>
						else if (j == 1) return '6';
 1a8:	01 30       	cpi	r16, 0x01	; 1
 1aa:	11 05       	cpc	r17, r1
 1ac:	31 f1       	breq	.+76     	; 0x1fa <Keypad_getkey+0x15a>
						else if (j == 2) return '9';
 1ae:	02 30       	cpi	r16, 0x02	; 2
 1b0:	11 05       	cpc	r17, r1
 1b2:	29 f1       	breq	.+74     	; 0x1fe <Keypad_getkey+0x15e>
						else if (j == 3) return '#';
 1b4:	03 30       	cpi	r16, 0x03	; 3
 1b6:	11 05       	cpc	r17, r1
 1b8:	31 f5       	brne	.+76     	; 0x206 <Keypad_getkey+0x166>
 1ba:	23 c0       	rjmp	.+70     	; 0x202 <Keypad_getkey+0x162>

		keypadPORT &= ~ (1 << Key_padCol[i]);//send a low to a particular row of the keypad
		


			for(j = 0; j < 4; j++)
 1bc:	94 e0       	ldi	r25, 0x04	; 4
 1be:	e9 16       	cp	r14, r25
 1c0:	f1 04       	cpc	r15, r1
 1c2:	0c f4       	brge	.+2      	; 0x1c6 <Keypad_getkey+0x126>
 1c4:	ad cf       	rjmp	.-166    	; 0x120 <Keypad_getkey+0x80>

char Keypad_getkey()
{
	
	int i, j;
	for(i = 0; i < 3; i++)
 1c6:	6f 5f       	subi	r22, 0xFF	; 255
 1c8:	7f 4f       	sbci	r23, 0xFF	; 255
 1ca:	63 30       	cpi	r22, 0x03	; 3
 1cc:	71 05       	cpc	r23, r1
 1ce:	09 f0       	breq	.+2      	; 0x1d2 <Keypad_getkey+0x132>
 1d0:	74 cf       	rjmp	.-280    	; 0xba <Keypad_getkey+0x1a>
					}
				}
			}
		}
		
		return 'A';
 1d2:	81 e4       	ldi	r24, 0x41	; 65
 1d4:	1e c0       	rjmp	.+60     	; 0x212 <Keypad_getkey+0x172>
					while(!(keypadPIN & (1<<Key_padRow[j])));  //wait for key to be released  (Single press)
					switch(i)
					{
					case(0):
                		{
						if (j == 0) return '1';
 1d6:	81 e3       	ldi	r24, 0x31	; 49
 1d8:	1c c0       	rjmp	.+56     	; 0x212 <Keypad_getkey+0x172>
						else if (j == 1) return '4';
 1da:	84 e3       	ldi	r24, 0x34	; 52
 1dc:	1a c0       	rjmp	.+52     	; 0x212 <Keypad_getkey+0x172>
						else if (j == 2) return '7';
 1de:	87 e3       	ldi	r24, 0x37	; 55
 1e0:	18 c0       	rjmp	.+48     	; 0x212 <Keypad_getkey+0x172>
						else if (j == 3) return '*';
 1e2:	8a e2       	ldi	r24, 0x2A	; 42
 1e4:	16 c0       	rjmp	.+44     	; 0x212 <Keypad_getkey+0x172>
						break;
                		}
					case(1):
                		{
						if (j == 0) return '2';
 1e6:	82 e3       	ldi	r24, 0x32	; 50
 1e8:	14 c0       	rjmp	.+40     	; 0x212 <Keypad_getkey+0x172>
						else if (j == 1) return '5';
 1ea:	85 e3       	ldi	r24, 0x35	; 53
 1ec:	12 c0       	rjmp	.+36     	; 0x212 <Keypad_getkey+0x172>
						else if (j == 2) return '8';
 1ee:	88 e3       	ldi	r24, 0x38	; 56
 1f0:	10 c0       	rjmp	.+32     	; 0x212 <Keypad_getkey+0x172>
						else if (j == 3) return '0';
 1f2:	80 e3       	ldi	r24, 0x30	; 48
 1f4:	0e c0       	rjmp	.+28     	; 0x212 <Keypad_getkey+0x172>
						break;
                		}
					case(2):
                		{
						if (j == 0) return '3';
 1f6:	83 e3       	ldi	r24, 0x33	; 51
 1f8:	0c c0       	rjmp	.+24     	; 0x212 <Keypad_getkey+0x172>
						else if (j == 1) return '6';
 1fa:	86 e3       	ldi	r24, 0x36	; 54
 1fc:	0a c0       	rjmp	.+20     	; 0x212 <Keypad_getkey+0x172>
						else if (j == 2) return '9';
 1fe:	89 e3       	ldi	r24, 0x39	; 57
 200:	08 c0       	rjmp	.+16     	; 0x212 <Keypad_getkey+0x172>
						else if (j == 3) return '#';
 202:	83 e2       	ldi	r24, 0x23	; 35
 204:	06 c0       	rjmp	.+12     	; 0x212 <Keypad_getkey+0x172>

		keypadPORT &= ~ (1 << Key_padCol[i]);//send a low to a particular row of the keypad
		


			for(j = 0; j < 4; j++)
 206:	84 e0       	ldi	r24, 0x04	; 4
 208:	e8 16       	cp	r14, r24
 20a:	f1 04       	cpc	r15, r1
 20c:	0c f4       	brge	.+2      	; 0x210 <Keypad_getkey+0x170>
 20e:	88 cf       	rjmp	.-240    	; 0x120 <Keypad_getkey+0x80>
					}
				}
			}
		}
		
		return 'A';
 210:	81 e4       	ldi	r24, 0x41	; 65

}
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	1f 91       	pop	r17
 218:	0f 91       	pop	r16
 21a:	ff 90       	pop	r15
 21c:	ef 90       	pop	r14
 21e:	08 95       	ret

00000220 <LCD_lcd_kick>:
	LCD_lcd_kick ();
	LCD_control &= 0x0F;  // Make Data Nibble as 0000
	LCD_control |= ((command<<4)&0xF0);
	LCD_lcd_kick ();
	//LCD_port = 0;
}
 220:	c3 98       	cbi	0x18, 3	; 24
 222:	00 00       	nop
 224:	00 00       	nop
 226:	8f ec       	ldi	r24, 0xCF	; 207
 228:	97 e0       	ldi	r25, 0x07	; 7
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <LCD_lcd_kick+0xa>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <LCD_lcd_kick+0x10>
 230:	00 00       	nop
 232:	c3 9a       	sbi	0x18, 3	; 24
 234:	08 95       	ret

00000236 <LCD_check_lcd_isbusy>:
 236:	8a b3       	in	r24, 0x1a	; 26
 238:	1a ba       	out	0x1a, r1	; 26
 23a:	c0 98       	cbi	0x18, 0	; 24
 23c:	c1 9a       	sbi	0x18, 1	; 24
 23e:	cf 9b       	sbis	0x19, 7	; 25
 240:	04 c0       	rjmp	.+8      	; 0x24a <LCD_check_lcd_isbusy+0x14>
 242:	0e 94 10 01 	call	0x220	; 0x220 <LCD_lcd_kick>
 246:	cf 99       	sbic	0x19, 7	; 25
 248:	fc cf       	rjmp	.-8      	; 0x242 <LCD_check_lcd_isbusy+0xc>
 24a:	8f ef       	ldi	r24, 0xFF	; 255
 24c:	8a bb       	out	0x1a, r24	; 26
 24e:	c1 98       	cbi	0x18, 1	; 24
 250:	08 95       	ret

00000252 <LCD_Send_A_Command>:
 252:	cf 93       	push	r28
 254:	c8 2f       	mov	r28, r24
 256:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_check_lcd_isbusy>
 25a:	cb bb       	out	0x1b, r28	; 27
 25c:	88 b3       	in	r24, 0x18	; 24
 25e:	8c 7f       	andi	r24, 0xFC	; 252
 260:	88 bb       	out	0x18, r24	; 24
 262:	0e 94 10 01 	call	0x220	; 0x220 <LCD_lcd_kick>
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <LCD_clear_screen>:
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	0e 94 29 01 	call	0x252	; 0x252 <LCD_Send_A_Command>
 270:	08 95       	ret

00000272 <LCD_lcd_init>:
 272:	8f e3       	ldi	r24, 0x3F	; 63
 274:	9c e9       	ldi	r25, 0x9C	; 156
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <LCD_lcd_init+0x4>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <LCD_lcd_init+0xa>
 27c:	00 00       	nop
 27e:	87 b3       	in	r24, 0x17	; 23
 280:	8b 60       	ori	r24, 0x0B	; 11
 282:	87 bb       	out	0x17, r24	; 23
 284:	88 b3       	in	r24, 0x18	; 24
 286:	84 7f       	andi	r24, 0xF4	; 244
 288:	88 bb       	out	0x18, r24	; 24
 28a:	8f ef       	ldi	r24, 0xFF	; 255
 28c:	8a bb       	out	0x1a, r24	; 26
 28e:	8f e2       	ldi	r24, 0x2F	; 47
 290:	95 e7       	ldi	r25, 0x75	; 117
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <LCD_lcd_init+0x20>
 296:	00 c0       	rjmp	.+0      	; 0x298 <LCD_lcd_init+0x26>
 298:	00 00       	nop
 29a:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_clear_screen>
 29e:	86 e0       	ldi	r24, 0x06	; 6
 2a0:	0e 94 29 01 	call	0x252	; 0x252 <LCD_Send_A_Command>
 2a4:	80 e8       	ldi	r24, 0x80	; 128
 2a6:	0e 94 29 01 	call	0x252	; 0x252 <LCD_Send_A_Command>
 2aa:	8f e0       	ldi	r24, 0x0F	; 15
 2ac:	0e 94 29 01 	call	0x252	; 0x252 <LCD_Send_A_Command>
 2b0:	88 e3       	ldi	r24, 0x38	; 56
 2b2:	0e 94 29 01 	call	0x252	; 0x252 <LCD_Send_A_Command>
 2b6:	08 95       	ret

000002b8 <LCD_GotoXY>:
 2b8:	81 11       	cpse	r24, r1
 2ba:	07 c0       	rjmp	.+14     	; 0x2ca <LCD_GotoXY+0x12>
 2bc:	60 31       	cpi	r22, 0x10	; 16
 2be:	68 f4       	brcc	.+26     	; 0x2da <LCD_GotoXY+0x22>
 2c0:	80 e8       	ldi	r24, 0x80	; 128
 2c2:	86 0f       	add	r24, r22
 2c4:	0e 94 29 01 	call	0x252	; 0x252 <LCD_Send_A_Command>
 2c8:	08 95       	ret
 2ca:	81 30       	cpi	r24, 0x01	; 1
 2cc:	31 f4       	brne	.+12     	; 0x2da <LCD_GotoXY+0x22>
 2ce:	60 31       	cpi	r22, 0x10	; 16
 2d0:	20 f4       	brcc	.+8      	; 0x2da <LCD_GotoXY+0x22>
 2d2:	80 ec       	ldi	r24, 0xC0	; 192
 2d4:	86 0f       	add	r24, r22
 2d6:	0e 94 29 01 	call	0x252	; 0x252 <LCD_Send_A_Command>
 2da:	08 95       	ret

000002dc <LCD_Send_A_Character>:




void LCD_Send_A_Character(unsigned char character)
{
 2dc:	cf 93       	push	r28
 2de:	c8 2f       	mov	r28, r24

#ifdef EIGHT_BIT_MODE
	LCD_check_lcd_isbusy();
 2e0:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_check_lcd_isbusy>

	LCD_control |= 1<<RS_switch; //turn RS ON for Data mode.
 2e4:	c0 9a       	sbi	0x18, 0	; 24
	LCD_port = ( ( (character  ) << DATA_shift)   )  ;
 2e6:	cb bb       	out	0x1b, r28	; 27
	LCD_control |= 1<<RS_switch; //turn RS ON for Data mode.
 2e8:	c0 9a       	sbi	0x18, 0	; 24
	LCD_control &= ~ (1<<ReadWrite);//turn RW off so you can write.
 2ea:	c1 98       	cbi	0x18, 1	; 24


	LCD_lcd_kick ();
 2ec:	0e 94 10 01 	call	0x220	; 0x220 <LCD_lcd_kick>
	LCD_lcd_kick ();

#endif


}
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <LCD_Send_A_String>:

void LCD_Send_A_String(char *StringOfCharacters)
{
 2f4:	0f 93       	push	r16
 2f6:	1f 93       	push	r17
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	8c 01       	movw	r16, r24


	int count=0 ;//to count how much char on the line (it should be 16 char only)
 2fe:	c0 e0       	ldi	r28, 0x00	; 0
 300:	d0 e0       	ldi	r29, 0x00	; 0
	while(*StringOfCharacters > 0)
 302:	15 c0       	rjmp	.+42     	; 0x32e <LCD_Send_A_String+0x3a>
	{
		count++;
 304:	21 96       	adiw	r28, 0x01	; 1
		LCD_Send_A_Character(*StringOfCharacters++);
 306:	0e 94 6e 01 	call	0x2dc	; 0x2dc <LCD_Send_A_Character>
		if (count == 16  ) // go to the second line
 30a:	c0 31       	cpi	r28, 0x10	; 16
 30c:	d1 05       	cpc	r29, r1
 30e:	21 f4       	brne	.+8      	; 0x318 <LCD_Send_A_String+0x24>
			LCD_Send_A_Command(0x80+position);
	}
	else if (line==1)
	{
		if (position < 16 && position >=0)
			LCD_Send_A_Command(0xc0 + position);
 310:	80 ec       	ldi	r24, 0xC0	; 192
 312:	0e 94 29 01 	call	0x252	; 0x252 <LCD_Send_A_Command>
 316:	0b c0       	rjmp	.+22     	; 0x32e <LCD_Send_A_String+0x3a>
		LCD_Send_A_Character(*StringOfCharacters++);
		if (count == 16  ) // go to the second line
		{
			LCD_GotoXY(1,0); //line 1 position zero
		}
		else if (count == 32 || count==33) // clear screen and show again
 318:	ce 01       	movw	r24, r28
 31a:	80 97       	sbiw	r24, 0x20	; 32
 31c:	02 97       	sbiw	r24, 0x02	; 2
 31e:	38 f4       	brcc	.+14     	; 0x32e <LCD_Send_A_String+0x3a>
		{
			LCD_clear_screen();
 320:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_clear_screen>
void LCD_GotoXY(unsigned char line, unsigned char position )
{
	if(line==0)
	{
		if (position < 16 && position >=0)
			LCD_Send_A_Command(0x80+position);
 324:	80 e8       	ldi	r24, 0x80	; 128
 326:	0e 94 29 01 	call	0x252	; 0x252 <LCD_Send_A_Command>
		}
		else if (count == 32 || count==33) // clear screen and show again
		{
			LCD_clear_screen();
			LCD_GotoXY(0,0); //line 0 position zero
			count = 0 ;
 32a:	c0 e0       	ldi	r28, 0x00	; 0
 32c:	d0 e0       	ldi	r29, 0x00	; 0
void LCD_Send_A_String(char *StringOfCharacters)
{


	int count=0 ;//to count how much char on the line (it should be 16 char only)
	while(*StringOfCharacters > 0)
 32e:	f8 01       	movw	r30, r16
 330:	81 91       	ld	r24, Z+
 332:	8f 01       	movw	r16, r30
 334:	81 11       	cpse	r24, r1
 336:	e6 cf       	rjmp	.-52     	; 0x304 <LCD_Send_A_String+0x10>
			LCD_clear_screen();
			LCD_GotoXY(0,0); //line 0 position zero
			count = 0 ;
		}
	}
}
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	1f 91       	pop	r17
 33e:	0f 91       	pop	r16
 340:	08 95       	ret

00000342 <__vector_10>:
	GICR |= 1<<6;
}

void getPassoword()
{
		inputIndex = 0;
 342:	1f 92       	push	r1
 344:	0f 92       	push	r0
 346:	0f b6       	in	r0, 0x3f	; 63
 348:	0f 92       	push	r0
 34a:	11 24       	eor	r1, r1
 34c:	8f 93       	push	r24
 34e:	9f 93       	push	r25
 350:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <__data_end>
 354:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <__data_end+0x1>
 358:	01 96       	adiw	r24, 0x01	; 1
 35a:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <__data_end+0x1>
 35e:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__data_end>
 362:	04 97       	sbiw	r24, 0x04	; 4
 364:	41 f4       	brne	.+16     	; 0x376 <__vector_10+0x34>
 366:	92 b3       	in	r25, 0x12	; 18
 368:	88 e1       	ldi	r24, 0x18	; 24
 36a:	89 27       	eor	r24, r25
 36c:	82 bb       	out	0x12, r24	; 18
 36e:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__data_end+0x1>
 372:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__data_end>
 376:	9f 91       	pop	r25
 378:	8f 91       	pop	r24
 37a:	0f 90       	pop	r0
 37c:	0f be       	out	0x3f, r0	; 63
 37e:	0f 90       	pop	r0
 380:	1f 90       	pop	r1
 382:	18 95       	reti

00000384 <correctPasswordEntered>:
 384:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_clear_screen>
 388:	60 e0       	ldi	r22, 0x00	; 0
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCD_GotoXY>
 390:	82 e7       	ldi	r24, 0x72	; 114
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <LCD_Send_A_String>
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCD_GotoXY>
 3a0:	82 b3       	in	r24, 0x12	; 18
 3a2:	83 60       	ori	r24, 0x03	; 3
 3a4:	82 bb       	out	0x12, r24	; 18
 3a6:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <continueTakingPasswords>
 3aa:	08 95       	ret

000003ac <init_GPIO>:
 3ac:	8b e1       	ldi	r24, 0x1B	; 27
 3ae:	81 bb       	out	0x11, r24	; 17
 3b0:	92 9a       	sbi	0x12, 2	; 18
 3b2:	80 b7       	in	r24, 0x30	; 48
 3b4:	84 60       	ori	r24, 0x04	; 4
 3b6:	80 bf       	out	0x30, r24	; 48
 3b8:	85 b7       	in	r24, 0x35	; 53
 3ba:	82 60       	ori	r24, 0x02	; 2
 3bc:	85 bf       	out	0x35, r24	; 53
 3be:	8b b7       	in	r24, 0x3b	; 59
 3c0:	80 64       	ori	r24, 0x40	; 64
 3c2:	8b bf       	out	0x3b, r24	; 59
 3c4:	08 95       	ret

000003c6 <init_Timer0>:


void init_Timer0()
{
	//clear timer on compare mode
	TCCR0 &= ~(1<<WGM00);
 3c6:	83 b7       	in	r24, 0x33	; 51
 3c8:	8f 7b       	andi	r24, 0xBF	; 191
 3ca:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<WGM01);
 3cc:	83 b7       	in	r24, 0x33	; 51
 3ce:	88 60       	ori	r24, 0x08	; 8
 3d0:	83 bf       	out	0x33, r24	; 51
	
	//prescaling = 1024
	TCCR0 &= 0b000;
 3d2:	83 b7       	in	r24, 0x33	; 51
 3d4:	13 be       	out	0x33, r1	; 51
	
	//enable interrupt
	TIMSK |= 1<<OCIE0;
 3d6:	89 b7       	in	r24, 0x39	; 57
 3d8:	82 60       	ori	r24, 0x02	; 2
 3da:	89 bf       	out	0x39, r24	; 57
	OCR0 = 244;
 3dc:	84 ef       	ldi	r24, 0xF4	; 244
 3de:	8c bf       	out	0x3c, r24	; 60
 3e0:	08 95       	ret

000003e2 <main>:


int main(void)
{
	
	LCD_lcd_init();
 3e2:	0e 94 39 01 	call	0x272	; 0x272 <LCD_lcd_init>
	Keypad_init();
 3e6:	0e 94 49 00 	call	0x92	; 0x92 <Keypad_init>
	
	LCD_Send_A_String("Enter password");
 3ea:	8a e7       	ldi	r24, 0x7A	; 122
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <LCD_Send_A_String>
	LCD_GotoXY(1,0);
 3f2:	60 e0       	ldi	r22, 0x00	; 0
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCD_GotoXY>

	init_GPIO();
 3fa:	0e 94 d6 01 	call	0x3ac	; 0x3ac <init_GPIO>
	init_Timer0();
 3fe:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <init_Timer0>
	sei();
 402:	78 94       	sei
	GICR |= 1<<6;
}

void getPassoword()
{
		inputIndex = 0;
 404:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <inputIndex+0x1>
 408:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <inputIndex>
 40c:	20 c0       	rjmp	.+64     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>

	getPassoword();

    while (running) 
    {		
			if(continueTakingPasswords)
 40e:	99 23       	and	r25, r25
 410:	11 f1       	breq	.+68     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
			{	
				char inputChar = Keypad_getkey();
 412:	0e 94 50 00 	call	0xa0	; 0xa0 <Keypad_getkey>
				if(inputChar == 'A') continue;
 416:	81 34       	cpi	r24, 0x41	; 65
 418:	d1 f0       	breq	.+52     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
				enteredPassword[inputIndex] = inputChar;
 41a:	e0 91 a6 00 	lds	r30, 0x00A6	; 0x8000a6 <inputIndex>
 41e:	f0 91 a7 00 	lds	r31, 0x00A7	; 0x8000a7 <inputIndex+0x1>
 422:	e6 55       	subi	r30, 0x56	; 86
 424:	ff 4f       	sbci	r31, 0xFF	; 255
 426:	80 83       	st	Z, r24
				LCD_Send_A_Character(enteredPassword[inputIndex]);
 428:	0e 94 6e 01 	call	0x2dc	; 0x2dc <LCD_Send_A_Character>
				if(inputIndex == (CORRECT_PASSWORD_LENGTH - 1))
 42c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <inputIndex>
 430:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <inputIndex+0x1>
 434:	82 30       	cpi	r24, 0x02	; 2
 436:	91 05       	cpc	r25, r1
 438:	29 f4       	brne	.+10     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
				inputIndex = 0;
 43a:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <inputIndex+0x1>
 43e:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <inputIndex>
 442:	05 c0       	rjmp	.+10     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
				else
				inputIndex++;
 444:	01 96       	adiw	r24, 0x01	; 1
 446:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <inputIndex+0x1>
 44a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <inputIndex>
	init_Timer0();
	sei();

	getPassoword();

    while (running) 
 44e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <running>
    {		
			if(continueTakingPasswords)
 452:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <continueTakingPasswords>
	init_Timer0();
	sei();

	getPassoword();

    while (running) 
 456:	81 11       	cpse	r24, r1
 458:	da cf       	rjmp	.-76     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
				inputIndex = 0;
				else
				inputIndex++;
			}
    }
}
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	08 95       	ret

00000460 <enableTimer0>:
}


void enableTimer0()
{
	TCCR0 |= 0b101;
 460:	83 b7       	in	r24, 0x33	; 51
 462:	85 60       	ori	r24, 0x05	; 5
 464:	83 bf       	out	0x33, r24	; 51
 466:	08 95       	ret

00000468 <wrongPasswordEntered>:
}


void wrongPasswordEntered()
{
	trials++;
 468:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <trials>
 46c:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <trials+0x1>
 470:	01 96       	adiw	r24, 0x01	; 1
 472:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <trials+0x1>
 476:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <trials>
	LCD_clear_screen();
 47a:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_clear_screen>
	LCD_GotoXY(0,0);
 47e:	60 e0       	ldi	r22, 0x00	; 0
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCD_GotoXY>
	if(trials<3)
 486:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <trials>
 48a:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <trials+0x1>
 48e:	03 97       	sbiw	r24, 0x03	; 3
 490:	2c f4       	brge	.+10     	; 0x49c <wrongPasswordEntered+0x34>
	LCD_Send_A_String("Wrong, Re-enter");
 492:	89 e8       	ldi	r24, 0x89	; 137
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <LCD_Send_A_String>
 49a:	04 c0       	rjmp	.+8      	; 0x4a4 <wrongPasswordEntered+0x3c>
	else
	LCD_Send_A_String("Wrong!");
 49c:	89 e9       	ldi	r24, 0x99	; 153
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <LCD_Send_A_String>
	LCD_GotoXY(1,0);
 4a4:	60 e0       	ldi	r22, 0x00	; 0
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCD_GotoXY>
	
	if(trials<3)
 4ac:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <trials>
 4b0:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <trials+0x1>
 4b4:	03 97       	sbiw	r24, 0x03	; 3
 4b6:	2c f4       	brge	.+10     	; 0x4c2 <wrongPasswordEntered+0x5a>
	GICR |= 1<<6;
}

void getPassoword()
{
		inputIndex = 0;
 4b8:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <inputIndex+0x1>
 4bc:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <inputIndex>
 4c0:	08 95       	ret
		getPassoword();
	}
	
	else
	{
		continueTakingPasswords = 0;
 4c2:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <continueTakingPasswords>
		enableTimer0();
 4c6:	0e 94 30 02 	call	0x460	; 0x460 <enableTimer0>
 4ca:	08 95       	ret

000004cc <__vector_1>:
void getPassoword();
void enableTimer0();


ISR(INT0_vect)
{
 4cc:	1f 92       	push	r1
 4ce:	0f 92       	push	r0
 4d0:	0f b6       	in	r0, 0x3f	; 63
 4d2:	0f 92       	push	r0
 4d4:	11 24       	eor	r1, r1
 4d6:	2f 93       	push	r18
 4d8:	3f 93       	push	r19
 4da:	4f 93       	push	r20
 4dc:	5f 93       	push	r21
 4de:	6f 93       	push	r22
 4e0:	7f 93       	push	r23
 4e2:	8f 93       	push	r24
 4e4:	9f 93       	push	r25
 4e6:	af 93       	push	r26
 4e8:	bf 93       	push	r27
 4ea:	ef 93       	push	r30
 4ec:	ff 93       	push	r31
	int i;
	unsigned char equals = 1;
	for(i = 0; i<CORRECT_PASSWORD_LENGTH; i++)
	{
		if(enteredPassword[i] != correctPassword[i])
 4ee:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <correctPassword>
 4f2:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <correctPassword+0x1>
 4f6:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <enteredPassword>
 4fa:	80 81       	ld	r24, Z
 4fc:	98 13       	cpse	r25, r24
 4fe:	0d c0       	rjmp	.+26     	; 0x51a <__vector_1+0x4e>
 500:	91 81       	ldd	r25, Z+1	; 0x01
 502:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <enteredPassword+0x1>
 506:	98 13       	cpse	r25, r24
 508:	08 c0       	rjmp	.+16     	; 0x51a <__vector_1+0x4e>
 50a:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <enteredPassword+0x2>
 50e:	82 81       	ldd	r24, Z+2	; 0x02
 510:	98 13       	cpse	r25, r24
 512:	03 c0       	rjmp	.+6      	; 0x51a <__vector_1+0x4e>
		}
	}
	
	if(equals)
	{
		correctPasswordEntered();
 514:	0e 94 c2 01 	call	0x384	; 0x384 <correctPasswordEntered>
	else
	{
		wrongPasswordEntered();
	}
	
}
 518:	02 c0       	rjmp	.+4      	; 0x51e <__vector_1+0x52>
		correctPasswordEntered();
	}
	
	else
	{
		wrongPasswordEntered();
 51a:	0e 94 34 02 	call	0x468	; 0x468 <wrongPasswordEntered>
	}
	
}
 51e:	ff 91       	pop	r31
 520:	ef 91       	pop	r30
 522:	bf 91       	pop	r27
 524:	af 91       	pop	r26
 526:	9f 91       	pop	r25
 528:	8f 91       	pop	r24
 52a:	7f 91       	pop	r23
 52c:	6f 91       	pop	r22
 52e:	5f 91       	pop	r21
 530:	4f 91       	pop	r20
 532:	3f 91       	pop	r19
 534:	2f 91       	pop	r18
 536:	0f 90       	pop	r0
 538:	0f be       	out	0x3f, r0	; 63
 53a:	0f 90       	pop	r0
 53c:	1f 90       	pop	r1
 53e:	18 95       	reti

00000540 <_exit>:
 540:	f8 94       	cli

00000542 <__stop_program>:
 542:	ff cf       	rjmp	.-2      	; 0x542 <__stop_program>
