
RT-task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000004f8  0000056c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000a0  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000790  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000261  00000000  00000000  00000de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000025a  00000000  00000000  00001049  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000027c  00000000  00000000  000012a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002bf  00000000  00000000  00001520  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000b0b  00000000  00000000  000017df  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000080  00000000  00000000  000022ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__ctors_end>
   4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__vector_1>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__vector_5>
  18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__vector_11>
  30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  54:	77 00       	.word	0x0077	; ????
  56:	71 00       	.word	0x0071	; ????
  58:	73 00       	.word	0x0073	; ????
  5a:	75 00       	.word	0x0075	; ????
  5c:	78 00       	.word	0x0078	; ????
  5e:	78 00       	.word	0x0078	; ????
  60:	78 00       	.word	0x0078	; ????
  62:	78 00       	.word	0x0078	; ????
  64:	78 00       	.word	0x0078	; ????
  66:	78 00       	.word	0x0078	; ????
  68:	78 00       	.word	0x0078	; ????
  6a:	78 00       	.word	0x0078	; ????
  6c:	78 00       	.word	0x0078	; ????
  6e:	78 00       	.word	0x0078	; ????
  70:	78 00       	.word	0x0078	; ????
  72:	78 00       	.word	0x0078	; ????
  74:	78 00       	.word	0x0078	; ????
  76:	78 00       	.word	0x0078	; ????
  78:	78 00       	.word	0x0078	; ????
  7a:	78 00       	.word	0x0078	; ????
  7c:	78 00       	.word	0x0078	; ????
  7e:	78 00       	.word	0x0078	; ????
  80:	78 00       	.word	0x0078	; ????
  82:	78 00       	.word	0x0078	; ????
  84:	78 00       	.word	0x0078	; ????
  86:	78 00       	.word	0x0078	; ????
  88:	78 00       	.word	0x0078	; ????
  8a:	78 00       	.word	0x0078	; ????
  8c:	78 00       	.word	0x0078	; ????
  8e:	78 00       	.word	0x0078	; ????
  90:	78 00       	.word	0x0078	; ????
  92:	78 00       	.word	0x0078	; ????
  94:	77 00       	.word	0x0077	; ????
  96:	71 00       	.word	0x0071	; ????
  98:	73 00       	.word	0x0073	; ????
  9a:	75 00       	.word	0x0075	; ????

0000009c <__ctors_end>:
  9c:	11 24       	eor	r1, r1
  9e:	1f be       	out	0x3f, r1	; 63
  a0:	cf e5       	ldi	r28, 0x5F	; 95
  a2:	d8 e0       	ldi	r29, 0x08	; 8
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
  a8:	10 e0       	ldi	r17, 0x00	; 0
  aa:	a0 e6       	ldi	r26, 0x60	; 96
  ac:	b0 e0       	ldi	r27, 0x00	; 0
  ae:	e8 ef       	ldi	r30, 0xF8	; 248
  b0:	f4 e0       	ldi	r31, 0x04	; 4
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x10>
  b4:	05 90       	lpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	ac 37       	cpi	r26, 0x7C	; 124
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0xc>
  be:	0e 94 35 02 	call	0x46a	; 0x46a <main>
  c2:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <get_port_index>:
 volatile unsigned char*  GPIO_pins[] = {myPINA,myPINB,myPINC,myPIND};

u8 get_port_index (u8 port_name)
{
	u8 i ;
	switch (port_name)
  ca:	48 2f       	mov	r20, r24
  cc:	50 e0       	ldi	r21, 0x00	; 0
  ce:	fa 01       	movw	r30, r20
  d0:	e1 54       	subi	r30, 0x41	; 65
  d2:	f1 09       	sbc	r31, r1
  d4:	e4 32       	cpi	r30, 0x24	; 36
  d6:	f1 05       	cpc	r31, r1
  d8:	58 f4       	brcc	.+22     	; 0xf0 <get_port_index+0x26>
  da:	e6 5d       	subi	r30, 0xD6	; 214
  dc:	ff 4f       	sbci	r31, 0xFF	; 255
  de:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <__tablejump2__>
	case 'a':
		i = 0 ;
		break;
	case 'B' :
	case 'b':
		i = 1 ;
  e2:	91 e0       	ldi	r25, 0x01	; 1
		break;
  e4:	05 c0       	rjmp	.+10     	; 0xf0 <get_port_index+0x26>
	case 'C':
	case 'c':
		i = 2 ;
  e6:	92 e0       	ldi	r25, 0x02	; 2
		break;
  e8:	03 c0       	rjmp	.+6      	; 0xf0 <get_port_index+0x26>
	case 'D':
	case 'd':

		i = 3 ;
  ea:	93 e0       	ldi	r25, 0x03	; 3
		break;
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <get_port_index+0x26>
	u8 i ;
	switch (port_name)
	{
	case 'A':
	case 'a':
		i = 0 ;
  ee:	90 e0       	ldi	r25, 0x00	; 0
		break;

	}
return i ;

}
  f0:	89 2f       	mov	r24, r25
  f2:	08 95       	ret

000000f4 <GPIO_voidInit>:


 void GPIO_voidInit(void)
{
	/*Comment!: DDR initialization  */
	*GPIO_dirs[0] = Init_direction_default;
  f4:	e0 91 68 00 	lds	r30, 0x0068
  f8:	f0 91 69 00 	lds	r31, 0x0069
  fc:	10 82       	st	Z, r1
	*GPIO_dirs[1] = Init_direction_default;
  fe:	e0 91 6a 00 	lds	r30, 0x006A
 102:	f0 91 6b 00 	lds	r31, 0x006B
 106:	10 82       	st	Z, r1
	*GPIO_dirs[2] = Init_direction_default;
 108:	e0 91 6c 00 	lds	r30, 0x006C
 10c:	f0 91 6d 00 	lds	r31, 0x006D
 110:	10 82       	st	Z, r1
	*GPIO_dirs[3] = Init_direction_default;
 112:	e0 91 6e 00 	lds	r30, 0x006E
 116:	f0 91 6f 00 	lds	r31, 0x006F
 11a:	10 82       	st	Z, r1
 11c:	08 95       	ret

0000011e <GPIO_u8_ReadPinVal>:

//===================PIN==========================
//Data
/*Comment!: Read Pin Value */
u8 GPIO_u8_ReadPinVal(u8 PinIdx,u8* PtrToVal, u8 Port_Name)
{
 11e:	1f 93       	push	r17
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	18 2f       	mov	r17, r24
 126:	eb 01       	movw	r28, r22
	u8 API_Status ;

	if(PinIdx > no_of_pins_on_port - 1)
 128:	88 30       	cpi	r24, 0x08	; 8
 12a:	c0 f4       	brcc	.+48     	; 0x15c <GPIO_u8_ReadPinVal+0x3e>
		API_Status = error_happen;
	}
	else
	{

		*PtrToVal =  ((*GPIO_pins [ get_port_index(Port_Name) ] >>PinIdx)&1) ;
 12c:	84 2f       	mov	r24, r20
 12e:	0e 94 65 00 	call	0xca	; 0xca <get_port_index>
 132:	e8 2f       	mov	r30, r24
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	ee 0f       	add	r30, r30
 138:	ff 1f       	adc	r31, r31
 13a:	e0 5a       	subi	r30, 0xA0	; 160
 13c:	ff 4f       	sbci	r31, 0xFF	; 255
 13e:	01 90       	ld	r0, Z+
 140:	f0 81       	ld	r31, Z
 142:	e0 2d       	mov	r30, r0
 144:	20 81       	ld	r18, Z
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	c9 01       	movw	r24, r18
 14a:	02 c0       	rjmp	.+4      	; 0x150 <GPIO_u8_ReadPinVal+0x32>
 14c:	95 95       	asr	r25
 14e:	87 95       	ror	r24
 150:	1a 95       	dec	r17
 152:	e2 f7       	brpl	.-8      	; 0x14c <GPIO_u8_ReadPinVal+0x2e>
 154:	81 70       	andi	r24, 0x01	; 1
 156:	88 83       	st	Y, r24
		API_Status = No_error;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	01 c0       	rjmp	.+2      	; 0x15e <GPIO_u8_ReadPinVal+0x40>
{
	u8 API_Status ;

	if(PinIdx > no_of_pins_on_port - 1)
	{
		API_Status = error_happen;
 15c:	80 e0       	ldi	r24, 0x00	; 0
		API_Status = No_error;
	}

	return API_Status ;

}
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	1f 91       	pop	r17
 164:	08 95       	ret

00000166 <GPIO_u8_WritePinVal>:

/*Comment!: Write Pin Value */
u8 GPIO_u8_WritePinVal(u8 PinIdx,u8 PinVal , u8 Port_Name)
{
 166:	cf 93       	push	r28
 168:	c8 2f       	mov	r28, r24
	u8 API_Status ;

	if(PinIdx > no_of_pins_on_port - 1)
 16a:	88 30       	cpi	r24, 0x08	; 8
 16c:	b8 f5       	brcc	.+110    	; 0x1dc <GPIO_u8_WritePinVal+0x76>
	{
		API_Status = error_happen;
	}
	else
	{
		switch(PinVal)
 16e:	66 23       	and	r22, r22
 170:	d9 f0       	breq	.+54     	; 0x1a8 <GPIO_u8_WritePinVal+0x42>
 172:	61 30       	cpi	r22, 0x01	; 1
 174:	a9 f5       	brne	.+106    	; 0x1e0 <GPIO_u8_WritePinVal+0x7a>
		{
		case 1:
			*GPIO_ports[ get_port_index(Port_Name) ] |= 1<<PinIdx;
 176:	84 2f       	mov	r24, r20
 178:	0e 94 65 00 	call	0xca	; 0xca <get_port_index>
 17c:	e8 2f       	mov	r30, r24
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	ee 0f       	add	r30, r30
 182:	ff 1f       	adc	r31, r31
 184:	e0 59       	subi	r30, 0x90	; 144
 186:	ff 4f       	sbci	r31, 0xFF	; 255
 188:	01 90       	ld	r0, Z+
 18a:	f0 81       	ld	r31, Z
 18c:	e0 2d       	mov	r30, r0
 18e:	40 81       	ld	r20, Z
 190:	21 e0       	ldi	r18, 0x01	; 1
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	c9 01       	movw	r24, r18
 196:	02 c0       	rjmp	.+4      	; 0x19c <GPIO_u8_WritePinVal+0x36>
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	ca 95       	dec	r28
 19e:	e2 f7       	brpl	.-8      	; 0x198 <GPIO_u8_WritePinVal+0x32>
 1a0:	84 2b       	or	r24, r20
 1a2:	80 83       	st	Z, r24
			API_Status = No_error;
 1a4:	81 e0       	ldi	r24, 0x01	; 1
			break;
 1a6:	1d c0       	rjmp	.+58     	; 0x1e2 <GPIO_u8_WritePinVal+0x7c>
		case 0:
			*GPIO_ports[ get_port_index(Port_Name) ] &= ~(1<<PinIdx) ;
 1a8:	84 2f       	mov	r24, r20
 1aa:	0e 94 65 00 	call	0xca	; 0xca <get_port_index>
 1ae:	e8 2f       	mov	r30, r24
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	ee 0f       	add	r30, r30
 1b4:	ff 1f       	adc	r31, r31
 1b6:	e0 59       	subi	r30, 0x90	; 144
 1b8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ba:	01 90       	ld	r0, Z+
 1bc:	f0 81       	ld	r31, Z
 1be:	e0 2d       	mov	r30, r0
 1c0:	40 81       	ld	r20, Z
 1c2:	21 e0       	ldi	r18, 0x01	; 1
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	c9 01       	movw	r24, r18
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <GPIO_u8_WritePinVal+0x68>
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	ca 95       	dec	r28
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <GPIO_u8_WritePinVal+0x64>
 1d2:	80 95       	com	r24
 1d4:	84 23       	and	r24, r20
 1d6:	80 83       	st	Z, r24
			API_Status = No_error;
 1d8:	81 e0       	ldi	r24, 0x01	; 1
			break;
 1da:	03 c0       	rjmp	.+6      	; 0x1e2 <GPIO_u8_WritePinVal+0x7c>
{
	u8 API_Status ;

	if(PinIdx > no_of_pins_on_port - 1)
	{
		API_Status = error_happen;
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	01 c0       	rjmp	.+2      	; 0x1e2 <GPIO_u8_WritePinVal+0x7c>
		case 0:
			*GPIO_ports[ get_port_index(Port_Name) ] &= ~(1<<PinIdx) ;
			API_Status = No_error;
			break;
		default:
			API_Status = error_happen;
 1e0:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return API_Status ;

}
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <GPIO_u8_WritePinDir>:

//Direction
/*Comment!: Write Pin Direction */
u8 GPIO_u8_WritePinDir(u8 PinIdx,u8 PinDir , u8 Port_Name)
{
 1e6:	cf 93       	push	r28
 1e8:	c8 2f       	mov	r28, r24
	u8 API_Status ;

	if(PinIdx > no_of_pins_on_port - 1)
 1ea:	88 30       	cpi	r24, 0x08	; 8
 1ec:	b8 f5       	brcc	.+110    	; 0x25c <GPIO_u8_WritePinDir+0x76>
	{
		API_Status = error_happen;
	}
	else
	{
		switch(PinDir)
 1ee:	66 23       	and	r22, r22
 1f0:	d9 f0       	breq	.+54     	; 0x228 <GPIO_u8_WritePinDir+0x42>
 1f2:	61 30       	cpi	r22, 0x01	; 1
 1f4:	a9 f5       	brne	.+106    	; 0x260 <GPIO_u8_WritePinDir+0x7a>
		{
		case 1:
			*GPIO_dirs[ get_port_index(Port_Name) ] |= 1<<PinIdx;
 1f6:	84 2f       	mov	r24, r20
 1f8:	0e 94 65 00 	call	0xca	; 0xca <get_port_index>
 1fc:	e8 2f       	mov	r30, r24
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	ee 0f       	add	r30, r30
 202:	ff 1f       	adc	r31, r31
 204:	e8 59       	subi	r30, 0x98	; 152
 206:	ff 4f       	sbci	r31, 0xFF	; 255
 208:	01 90       	ld	r0, Z+
 20a:	f0 81       	ld	r31, Z
 20c:	e0 2d       	mov	r30, r0
 20e:	40 81       	ld	r20, Z
 210:	21 e0       	ldi	r18, 0x01	; 1
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	c9 01       	movw	r24, r18
 216:	02 c0       	rjmp	.+4      	; 0x21c <GPIO_u8_WritePinDir+0x36>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	ca 95       	dec	r28
 21e:	e2 f7       	brpl	.-8      	; 0x218 <GPIO_u8_WritePinDir+0x32>
 220:	84 2b       	or	r24, r20
 222:	80 83       	st	Z, r24
			API_Status = No_error;
 224:	81 e0       	ldi	r24, 0x01	; 1
			break;
 226:	1d c0       	rjmp	.+58     	; 0x262 <GPIO_u8_WritePinDir+0x7c>
		case 0:
			*GPIO_dirs[ get_port_index(Port_Name) ] &= ~(1<<PinIdx) ;
 228:	84 2f       	mov	r24, r20
 22a:	0e 94 65 00 	call	0xca	; 0xca <get_port_index>
 22e:	e8 2f       	mov	r30, r24
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	ee 0f       	add	r30, r30
 234:	ff 1f       	adc	r31, r31
 236:	e8 59       	subi	r30, 0x98	; 152
 238:	ff 4f       	sbci	r31, 0xFF	; 255
 23a:	01 90       	ld	r0, Z+
 23c:	f0 81       	ld	r31, Z
 23e:	e0 2d       	mov	r30, r0
 240:	40 81       	ld	r20, Z
 242:	21 e0       	ldi	r18, 0x01	; 1
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	c9 01       	movw	r24, r18
 248:	02 c0       	rjmp	.+4      	; 0x24e <GPIO_u8_WritePinDir+0x68>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	ca 95       	dec	r28
 250:	e2 f7       	brpl	.-8      	; 0x24a <GPIO_u8_WritePinDir+0x64>
 252:	80 95       	com	r24
 254:	84 23       	and	r24, r20
 256:	80 83       	st	Z, r24
			API_Status = No_error;
 258:	81 e0       	ldi	r24, 0x01	; 1
			break;
 25a:	03 c0       	rjmp	.+6      	; 0x262 <GPIO_u8_WritePinDir+0x7c>
{
	u8 API_Status ;

	if(PinIdx > no_of_pins_on_port - 1)
	{
		API_Status = error_happen;
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	01 c0       	rjmp	.+2      	; 0x262 <GPIO_u8_WritePinDir+0x7c>
		case 0:
			*GPIO_dirs[ get_port_index(Port_Name) ] &= ~(1<<PinIdx) ;
			API_Status = No_error;
			break;
		default:
			API_Status = error_happen;
 260:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return API_Status ;

}
 262:	cf 91       	pop	r28
 264:	08 95       	ret

00000266 <GPIO_u8_WritePortDir>:
}

//Direction
/*Comment!: Write Port Direction */
u8 GPIO_u8_WritePortDir(u8 PortDir, u8 Port_Name)
{
 266:	cf 93       	push	r28
 268:	c8 2f       	mov	r28, r24
 26a:	86 2f       	mov	r24, r22
	  *GPIO_dirs [ get_port_index(Port_Name) ] = PortDir;
 26c:	0e 94 65 00 	call	0xca	; 0xca <get_port_index>
 270:	e8 2f       	mov	r30, r24
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	ee 0f       	add	r30, r30
 276:	ff 1f       	adc	r31, r31
 278:	e8 59       	subi	r30, 0x98	; 152
 27a:	ff 4f       	sbci	r31, 0xFF	; 255
 27c:	01 90       	ld	r0, Z+
 27e:	f0 81       	ld	r31, Z
 280:	e0 2d       	mov	r30, r0
 282:	c0 83       	st	Z, r28

	return No_error ;

}
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	cf 91       	pop	r28
 288:	08 95       	ret

0000028a <__vector_1>:
	fast
	};
	
enum state ledState[3]={off,off2,off1};
ISR(INT0_vect)
{
 28a:	1f 92       	push	r1
 28c:	0f 92       	push	r0
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	0f 92       	push	r0
 292:	11 24       	eor	r1, r1
 294:	df 92       	push	r13
 296:	ef 92       	push	r14
 298:	ff 92       	push	r15
 29a:	0f 93       	push	r16
 29c:	1f 93       	push	r17
 29e:	2f 93       	push	r18
 2a0:	3f 93       	push	r19
 2a2:	4f 93       	push	r20
 2a4:	5f 93       	push	r21
 2a6:	6f 93       	push	r22
 2a8:	7f 93       	push	r23
 2aa:	8f 93       	push	r24
 2ac:	9f 93       	push	r25
 2ae:	af 93       	push	r26
 2b0:	bf 93       	push	r27
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
 2b6:	ef 93       	push	r30
 2b8:	ff 93       	push	r31
 2ba:	c8 e7       	ldi	r28, 0x78	; 120
 2bc:	d0 e0       	ldi	r29, 0x00	; 0
 2be:	f1 2c       	mov	r15, r1
	for(int i=0;i<3;i++)
	{
		ledState[i]=(ledState[i]+1)%STATE_NUMBERS;
 2c0:	06 e0       	ldi	r16, 0x06	; 6
 2c2:	10 e0       	ldi	r17, 0x00	; 0
			 TCCR0=0x04;
			 TIMSK|= 0x1;
		}
		else if(ledState[i]==slow)
		{
			TCCR2=0x01;
 2c4:	ee 24       	eor	r14, r14
 2c6:	e3 94       	inc	r14
				GPIO_u8_WritePinVal(i,1,'a');
				
			}
		else if(ledState[i]==fast)
		 {
			 TCCR0=0x04;
 2c8:	68 94       	set
 2ca:	dd 24       	eor	r13, r13
 2cc:	d2 f8       	bld	r13, 2
enum state ledState[3]={off,off2,off1};
ISR(INT0_vect)
{
	for(int i=0;i<3;i++)
	{
		ledState[i]=(ledState[i]+1)%STATE_NUMBERS;
 2ce:	88 81       	ld	r24, Y
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	01 96       	adiw	r24, 0x01	; 1
 2d4:	b8 01       	movw	r22, r16
 2d6:	0e 94 4c 02 	call	0x498	; 0x498 <__divmodhi4>
 2da:	89 93       	st	Y+, r24
		if((ledState[i]==off)||(ledState[i]==off1)||(ledState[i]==off2))
 2dc:	83 30       	cpi	r24, 0x03	; 3
 2de:	30 f4       	brcc	.+12     	; 0x2ec <__vector_1+0x62>
			 {
				 GPIO_u8_WritePinVal(i,0,'a');
 2e0:	41 e6       	ldi	r20, 0x61	; 97
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	8f 2d       	mov	r24, r15
 2e6:	0e 94 b3 00 	call	0x166	; 0x166 <GPIO_u8_WritePinVal>
 2ea:	15 c0       	rjmp	.+42     	; 0x316 <__vector_1+0x8c>
				 
			 }
		else if(ledState[i]==on) 
 2ec:	83 30       	cpi	r24, 0x03	; 3
 2ee:	31 f4       	brne	.+12     	; 0x2fc <__vector_1+0x72>
			{
				GPIO_u8_WritePinVal(i,1,'a');
 2f0:	41 e6       	ldi	r20, 0x61	; 97
 2f2:	6e 2d       	mov	r22, r14
 2f4:	8f 2d       	mov	r24, r15
 2f6:	0e 94 b3 00 	call	0x166	; 0x166 <GPIO_u8_WritePinVal>
 2fa:	0d c0       	rjmp	.+26     	; 0x316 <__vector_1+0x8c>
				
			}
		else if(ledState[i]==fast)
 2fc:	85 30       	cpi	r24, 0x05	; 5
 2fe:	29 f4       	brne	.+10     	; 0x30a <__vector_1+0x80>
		 {
			 TCCR0=0x04;
 300:	d3 be       	out	0x33, r13	; 51
			 TIMSK|= 0x1;
 302:	89 b7       	in	r24, 0x39	; 57
 304:	81 60       	ori	r24, 0x01	; 1
 306:	89 bf       	out	0x39, r24	; 57
 308:	06 c0       	rjmp	.+12     	; 0x316 <__vector_1+0x8c>
		}
		else if(ledState[i]==slow)
 30a:	84 30       	cpi	r24, 0x04	; 4
 30c:	21 f4       	brne	.+8      	; 0x316 <__vector_1+0x8c>
		{
			TCCR2=0x01;
 30e:	e5 bc       	out	0x25, r14	; 37
			TIMSK|=0x40;
 310:	89 b7       	in	r24, 0x39	; 57
 312:	80 64       	ori	r24, 0x40	; 64
 314:	89 bf       	out	0x39, r24	; 57
 316:	f3 94       	inc	r15
	};
	
enum state ledState[3]={off,off2,off1};
ISR(INT0_vect)
{
	for(int i=0;i<3;i++)
 318:	83 e0       	ldi	r24, 0x03	; 3
 31a:	f8 12       	cpse	r15, r24
 31c:	d8 cf       	rjmp	.-80     	; 0x2ce <__vector_1+0x44>
		{
			TCCR2=0x01;
			TIMSK|=0x40;
		}
	}
}
 31e:	ff 91       	pop	r31
 320:	ef 91       	pop	r30
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	bf 91       	pop	r27
 328:	af 91       	pop	r26
 32a:	9f 91       	pop	r25
 32c:	8f 91       	pop	r24
 32e:	7f 91       	pop	r23
 330:	6f 91       	pop	r22
 332:	5f 91       	pop	r21
 334:	4f 91       	pop	r20
 336:	3f 91       	pop	r19
 338:	2f 91       	pop	r18
 33a:	1f 91       	pop	r17
 33c:	0f 91       	pop	r16
 33e:	ff 90       	pop	r15
 340:	ef 90       	pop	r14
 342:	df 90       	pop	r13
 344:	0f 90       	pop	r0
 346:	0f be       	out	0x3f, r0	; 63
 348:	0f 90       	pop	r0
 34a:	1f 90       	pop	r1
 34c:	18 95       	reti

0000034e <__vector_11>:
ISR(TIMER0_OVF_vect)
{
 34e:	1f 92       	push	r1
 350:	0f 92       	push	r0
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	0f 92       	push	r0
 356:	11 24       	eor	r1, r1
 358:	1f 93       	push	r17
 35a:	2f 93       	push	r18
 35c:	3f 93       	push	r19
 35e:	4f 93       	push	r20
 360:	5f 93       	push	r21
 362:	6f 93       	push	r22
 364:	7f 93       	push	r23
 366:	8f 93       	push	r24
 368:	9f 93       	push	r25
 36a:	af 93       	push	r26
 36c:	bf 93       	push	r27
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	ef 93       	push	r30
 374:	ff 93       	push	r31
	for(int i=0;i<3;i++)
	{
		if(ledState[i]==fast)
 376:	80 91 78 00 	lds	r24, 0x0078
 37a:	85 30       	cpi	r24, 0x05	; 5
 37c:	61 f0       	breq	.+24     	; 0x396 <__vector_11+0x48>
 37e:	80 91 79 00 	lds	r24, 0x0079
 382:	85 30       	cpi	r24, 0x05	; 5
 384:	31 f0       	breq	.+12     	; 0x392 <__vector_11+0x44>
 386:	80 91 7a 00 	lds	r24, 0x007A
 38a:	85 30       	cpi	r24, 0x05	; 5
 38c:	99 f4       	brne	.+38     	; 0x3b4 <__vector_11+0x66>
		}
	}
}
ISR(TIMER0_OVF_vect)
{
	for(int i=0;i<3;i++)
 38e:	12 e0       	ldi	r17, 0x02	; 2
 390:	03 c0       	rjmp	.+6      	; 0x398 <__vector_11+0x4a>
 392:	11 e0       	ldi	r17, 0x01	; 1
 394:	01 c0       	rjmp	.+2      	; 0x398 <__vector_11+0x4a>
 396:	10 e0       	ldi	r17, 0x00	; 0
	{
		if(ledState[i]==fast)
		{
			u8 *val;
			GPIO_u8_ReadPinVal(i,val,'a');
 398:	41 e6       	ldi	r20, 0x61	; 97
 39a:	c0 e0       	ldi	r28, 0x00	; 0
 39c:	d0 e0       	ldi	r29, 0x00	; 0
 39e:	be 01       	movw	r22, r28
 3a0:	81 2f       	mov	r24, r17
 3a2:	0e 94 8f 00 	call	0x11e	; 0x11e <GPIO_u8_ReadPinVal>
			GPIO_u8_WritePinVal(i,(*val)^0x1,'a');
 3a6:	68 81       	ld	r22, Y
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	68 27       	eor	r22, r24
 3ac:	41 e6       	ldi	r20, 0x61	; 97
 3ae:	81 2f       	mov	r24, r17
 3b0:	0e 94 b3 00 	call	0x166	; 0x166 <GPIO_u8_WritePinVal>
			break;
		}
	}
}
 3b4:	ff 91       	pop	r31
 3b6:	ef 91       	pop	r30
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	bf 91       	pop	r27
 3be:	af 91       	pop	r26
 3c0:	9f 91       	pop	r25
 3c2:	8f 91       	pop	r24
 3c4:	7f 91       	pop	r23
 3c6:	6f 91       	pop	r22
 3c8:	5f 91       	pop	r21
 3ca:	4f 91       	pop	r20
 3cc:	3f 91       	pop	r19
 3ce:	2f 91       	pop	r18
 3d0:	1f 91       	pop	r17
 3d2:	0f 90       	pop	r0
 3d4:	0f be       	out	0x3f, r0	; 63
 3d6:	0f 90       	pop	r0
 3d8:	1f 90       	pop	r1
 3da:	18 95       	reti

000003dc <__vector_5>:
ISR(TIMER2_OVF_vect)
{
 3dc:	1f 92       	push	r1
 3de:	0f 92       	push	r0
 3e0:	0f b6       	in	r0, 0x3f	; 63
 3e2:	0f 92       	push	r0
 3e4:	11 24       	eor	r1, r1
 3e6:	1f 93       	push	r17
 3e8:	2f 93       	push	r18
 3ea:	3f 93       	push	r19
 3ec:	4f 93       	push	r20
 3ee:	5f 93       	push	r21
 3f0:	6f 93       	push	r22
 3f2:	7f 93       	push	r23
 3f4:	8f 93       	push	r24
 3f6:	9f 93       	push	r25
 3f8:	af 93       	push	r26
 3fa:	bf 93       	push	r27
 3fc:	cf 93       	push	r28
 3fe:	df 93       	push	r29
 400:	ef 93       	push	r30
 402:	ff 93       	push	r31
	for(int i=0;i<3;i++)
	{
		if(ledState[i]==slow)
 404:	80 91 78 00 	lds	r24, 0x0078
 408:	84 30       	cpi	r24, 0x04	; 4
 40a:	61 f0       	breq	.+24     	; 0x424 <__vector_5+0x48>
 40c:	80 91 79 00 	lds	r24, 0x0079
 410:	84 30       	cpi	r24, 0x04	; 4
 412:	31 f0       	breq	.+12     	; 0x420 <__vector_5+0x44>
 414:	80 91 7a 00 	lds	r24, 0x007A
 418:	84 30       	cpi	r24, 0x04	; 4
 41a:	99 f4       	brne	.+38     	; 0x442 <__vector_5+0x66>
		}
	}
}
ISR(TIMER2_OVF_vect)
{
	for(int i=0;i<3;i++)
 41c:	12 e0       	ldi	r17, 0x02	; 2
 41e:	03 c0       	rjmp	.+6      	; 0x426 <__vector_5+0x4a>
 420:	11 e0       	ldi	r17, 0x01	; 1
 422:	01 c0       	rjmp	.+2      	; 0x426 <__vector_5+0x4a>
 424:	10 e0       	ldi	r17, 0x00	; 0
	{
		if(ledState[i]==slow)
		{
			u8 *val;
			GPIO_u8_ReadPinVal(i,val,'a');
 426:	41 e6       	ldi	r20, 0x61	; 97
 428:	c0 e0       	ldi	r28, 0x00	; 0
 42a:	d0 e0       	ldi	r29, 0x00	; 0
 42c:	be 01       	movw	r22, r28
 42e:	81 2f       	mov	r24, r17
 430:	0e 94 8f 00 	call	0x11e	; 0x11e <GPIO_u8_ReadPinVal>
			GPIO_u8_WritePinVal(i,(*val)^0x1,'a');
 434:	68 81       	ld	r22, Y
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	68 27       	eor	r22, r24
 43a:	41 e6       	ldi	r20, 0x61	; 97
 43c:	81 2f       	mov	r24, r17
 43e:	0e 94 b3 00 	call	0x166	; 0x166 <GPIO_u8_WritePinVal>
			break;
		}
	}
}
 442:	ff 91       	pop	r31
 444:	ef 91       	pop	r30
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	bf 91       	pop	r27
 44c:	af 91       	pop	r26
 44e:	9f 91       	pop	r25
 450:	8f 91       	pop	r24
 452:	7f 91       	pop	r23
 454:	6f 91       	pop	r22
 456:	5f 91       	pop	r21
 458:	4f 91       	pop	r20
 45a:	3f 91       	pop	r19
 45c:	2f 91       	pop	r18
 45e:	1f 91       	pop	r17
 460:	0f 90       	pop	r0
 462:	0f be       	out	0x3f, r0	; 63
 464:	0f 90       	pop	r0
 466:	1f 90       	pop	r1
 468:	18 95       	reti

0000046a <main>:
int main(void)
{
	GPIO_voidInit();
 46a:	0e 94 7a 00 	call	0xf4	; 0xf4 <GPIO_voidInit>
	GPIO_u8_WritePortDir(0x07,'a');
 46e:	61 e6       	ldi	r22, 0x61	; 97
 470:	87 e0       	ldi	r24, 0x07	; 7
 472:	0e 94 33 01 	call	0x266	; 0x266 <GPIO_u8_WritePortDir>
	GPIO_u8_WritePinDir(2,0,'d');
 476:	44 e6       	ldi	r20, 0x64	; 100
 478:	60 e0       	ldi	r22, 0x00	; 0
 47a:	82 e0       	ldi	r24, 0x02	; 2
 47c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <GPIO_u8_WritePinDir>
	SREG|=0x80;
 480:	8f b7       	in	r24, 0x3f	; 63
 482:	80 68       	ori	r24, 0x80	; 128
 484:	8f bf       	out	0x3f, r24	; 63
	MCUCR|=0x03;
 486:	85 b7       	in	r24, 0x35	; 53
 488:	83 60       	ori	r24, 0x03	; 3
 48a:	85 bf       	out	0x35, r24	; 53
	GICR|=0x40;
 48c:	8b b7       	in	r24, 0x3b	; 59
 48e:	80 64       	ori	r24, 0x40	; 64
 490:	8b bf       	out	0x3b, r24	; 59
	
	TCCR0 = 0x00; //fast
 492:	13 be       	out	0x33, r1	; 51
	TCCR2 = 0x00; //slow
 494:	15 bc       	out	0x25, r1	; 37
 496:	ff cf       	rjmp	.-2      	; 0x496 <main+0x2c>

00000498 <__divmodhi4>:
 498:	97 fb       	bst	r25, 7
 49a:	07 2e       	mov	r0, r23
 49c:	16 f4       	brtc	.+4      	; 0x4a2 <__divmodhi4+0xa>
 49e:	00 94       	com	r0
 4a0:	07 d0       	rcall	.+14     	; 0x4b0 <__divmodhi4_neg1>
 4a2:	77 fd       	sbrc	r23, 7
 4a4:	09 d0       	rcall	.+18     	; 0x4b8 <__divmodhi4_neg2>
 4a6:	0e 94 66 02 	call	0x4cc	; 0x4cc <__udivmodhi4>
 4aa:	07 fc       	sbrc	r0, 7
 4ac:	05 d0       	rcall	.+10     	; 0x4b8 <__divmodhi4_neg2>
 4ae:	3e f4       	brtc	.+14     	; 0x4be <__divmodhi4_exit>

000004b0 <__divmodhi4_neg1>:
 4b0:	90 95       	com	r25
 4b2:	81 95       	neg	r24
 4b4:	9f 4f       	sbci	r25, 0xFF	; 255
 4b6:	08 95       	ret

000004b8 <__divmodhi4_neg2>:
 4b8:	70 95       	com	r23
 4ba:	61 95       	neg	r22
 4bc:	7f 4f       	sbci	r23, 0xFF	; 255

000004be <__divmodhi4_exit>:
 4be:	08 95       	ret

000004c0 <__tablejump2__>:
 4c0:	ee 0f       	add	r30, r30
 4c2:	ff 1f       	adc	r31, r31

000004c4 <__tablejump__>:
 4c4:	05 90       	lpm	r0, Z+
 4c6:	f4 91       	lpm	r31, Z
 4c8:	e0 2d       	mov	r30, r0
 4ca:	09 94       	ijmp

000004cc <__udivmodhi4>:
 4cc:	aa 1b       	sub	r26, r26
 4ce:	bb 1b       	sub	r27, r27
 4d0:	51 e1       	ldi	r21, 0x11	; 17
 4d2:	07 c0       	rjmp	.+14     	; 0x4e2 <__udivmodhi4_ep>

000004d4 <__udivmodhi4_loop>:
 4d4:	aa 1f       	adc	r26, r26
 4d6:	bb 1f       	adc	r27, r27
 4d8:	a6 17       	cp	r26, r22
 4da:	b7 07       	cpc	r27, r23
 4dc:	10 f0       	brcs	.+4      	; 0x4e2 <__udivmodhi4_ep>
 4de:	a6 1b       	sub	r26, r22
 4e0:	b7 0b       	sbc	r27, r23

000004e2 <__udivmodhi4_ep>:
 4e2:	88 1f       	adc	r24, r24
 4e4:	99 1f       	adc	r25, r25
 4e6:	5a 95       	dec	r21
 4e8:	a9 f7       	brne	.-22     	; 0x4d4 <__udivmodhi4_loop>
 4ea:	80 95       	com	r24
 4ec:	90 95       	com	r25
 4ee:	bc 01       	movw	r22, r24
 4f0:	cd 01       	movw	r24, r26
 4f2:	08 95       	ret

000004f4 <_exit>:
 4f4:	f8 94       	cli

000004f6 <__stop_program>:
 4f6:	ff cf       	rjmp	.-2      	; 0x4f6 <__stop_program>
